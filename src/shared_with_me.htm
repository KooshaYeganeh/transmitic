<html>

<head>
    <title>Shared With Me</title>
    <style>
        @import url(style.css);
    </style>
    <script src="global_transmitic.js"></script>
    <script>

        // TODO cache data to not require refresh and state time of collection
        // TODO Replace with proper components to remove random divID mapping
        // TODO Don't create HTML until expanded?
        class SharedData extends Element {

            owner

            this(props) {
                this.owner = props.owner;
            }

            render(props) {
                return <div>
                    <h3>{props.owner}</h3>
                    {this.createFileList(props.files, props.error, 0, 0)}
                </div>
            }

            createFileList(files, error, divID) {
                if (error) {
                    return error;
                }
                if (!files) {
                    return "";
                }

                let style = "padding-left: 1.5em";
                let parentStyle = "display: none;";
                if (divID == 0) {
                    parentStyle = "";
                }
                return <div id={divID} style={parentStyle}>
                    {files.map((d) => <div style={style}>{this.createFile(d)}</div>)}
                </div>
            }

            createFile(d) {
                let showMore = "";
                let divID = 0;
                let info = "File";
                if (d.files.length > 0) {
                    info = "Folder (" + d.files.length + " total files)";
                    let childrenLength = d.files.length;
                    if (childrenLength > 2) {
                        divID = Math.random().toString();
                        divID = divID.substring(2, divID.length);
                        showMore = <button style="font-size: 8pt; margin-left: 1em;" class="show-more" div-id={divID} data-state="show" data-children={childrenLength}>Show more ({childrenLength})</button>;
                    }
                }
                return <div><button data-path={d.path} data-owner={this.owner} type="checkbox">{d.path} | {info} | {d.size_string} </button> {showMore} <br /> {this.createFileList(d.files, "", divID)}</div>
            }

            ["on click at button.show-more"](evt, btn) {
                let divID = btn.getAttribute("div-id");

                let children = btn.getAttribute("data-children")
                if (btn.getAttribute("data-state") == "show") {
                    document.$("div#" + divID).style.display = "inline-block";
                    btn.setAttribute("data-state", "collapse");
                    btn.content("Collapse (" + children + ")");
                } else {
                    document.$("div#" + divID).style.display = "none";
                    btn.setAttribute("data-state", "show");
                    btn.content("Show more (" + children + ")");
                }

            }

        }

        class SharedWithMe extends Element {

            refreshState;
            fileData;

            this(props) {
                this.refreshState = "empty";
                this.fileData = [];
            }

            render(props) {
                let contentElements;
                if (this.refreshState === "empty") {
                    contentElements = <div><br />Press Refresh All. The UI might freeze while refreshing.</div>;
                }
                else if (this.refreshState === "refreshing") {
                    contentElements = <div><br />Please wait. Refreshing...</div>;
                }
                else if (this.refreshState === "finished") {
                    contentElements = <div>{this.fileData.map((d) => <div><SharedData owner={d.owner} files={d.files} error={d.error} /> <hr style="margin-top: 1em;" /></div>)} </div>;
                }
                else {
                    contentElements = <div><br />Error: Unknown refreshState '{this.refreshState}'</div>;
                }
                let finalData = <div selectable>
                    <button id="refresh-all">Refresh All</button>
                    <button style="margin-left: 1em;" id="download-selected">Download Selected</button>
                    {contentElements}
                </div>
                return finalData;
            }

            ["on click at button#download-selected"]() {
                let checkedBoxes = document.querySelectorAll("button[type=checkbox]:checked");
                let selectedFiles = [];
                for (const box of checkedBoxes) {
                    let path = box.getAttribute("data-path");
                    let owner = box.getAttribute("data-owner");
                    selectedFiles.push({ "path": path, "owner": owner });
                }
                let response = Window.this.xcall('download_selected', { "files": selectedFiles });
            }

            ["on click at button#refresh-all"]() {
                this.componentUpdate({ refreshState: "refreshing" });

                let response = Window.this.xcall('refresh_shared_with_me');
                this.componentUpdate({ fileData: response, refreshState: "finished" });
            }

        }

        document.$("div#shared-with-me").content(<SharedWithMe />);

    </script>
</head>

<body>
    <div class="main-body">

        <h1>
            Shared With Me
        </h1>

        <div id="shared-with-me"></div>
    </div>
</body>

</html>