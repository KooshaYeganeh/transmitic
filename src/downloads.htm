<html>

<head>
    <title>Downloads</title>
    <style>
        @import url(style.css);
    </style>
    <script src="global_transmitic.js"></script>
    <script>

        let downloads_in_progress = [
            {
                owner: 'My Friend',
                percent: 90,
                path: 'C:\\Users\\my-friend\\Documents\\shared',
            },
            {
                owner: 'Other Friend1',
                percent: 50,
                path: 'C:\\Users\\other-friend\\Documents\\file.txt',
            }
        ];

        let downloads_invalid = [
        {
                owner: 'My Friend',
                percent: 90,
                path: 'C:\\Users\\my-friend\\Documents\\old',
            },
            {
                owner: 'Other Friend1',
                percent: 50,
                path: 'C:\\Users\\other-friend\\Documents\\gone.txt',
            }
        ];

        let downloads_offline = [
            {
                owner: 'My FriendO',
                percent: 2,
                path: 'C:\\hello\\world6',
            },
            {
                owner: 'My Friend1Y',
                percent: 54,
                path: 'C:\\hello\\world8',
            }
        ];

        let downloads_finished = [
            {
                owner: 'My FriendOFFF',
                path: 'C:\\hello\\world77',
            },
            {
                owner: 'My Friend1YYYYY',
                path: 'C:\\hello\\world8999',
            }
        ];

        // let all_downloads = {
        //     //in_progress: Window.this.xcall('get_downloads_in_progress'),
        //     in_progress: downloads_in_progress,
        //     invalid: downloads_invalid,
        //     offline: downloads_offline,
        //     finished: downloads_finished,
        //     queued: downloads_queued,
        // };

        let all_downloads = Window.this.xcall('get_all_downloads');
        let all_uploads = Window.this.xcall('get_all_uploads');
        //console.log(all_downloads);




        class SingleDownload extends Element {

            filePath;
            owner;

            this(props) {
                this.filePath = props.path;
                this.owner = props.owner;
            }

            render(props) {
                let description;
                let downloadClass;
                let openDownload = "";
                let cancelDownload = "";
                let pauseDownload = "";
                if (props.downloadState == "inProgress") {
                    downloadClass = "download-active";
                    description = props.owner + " | " + props.percent + "% | Downloading now...";
                    openDownload = <button class="open-download">Open</button>;
                    cancelDownload = <button class="cancel-download">Cancel</button>;
                    pauseDownload = <button class="pause-all">Pause Downloads from My Friend</button>;
                }
                else if (props.downloadState == "invalid") {
                    downloadClass = "download-invalid";
                    description = props.owner + " | Invalid or no longer shared with you";
                    //cancelDownload = <button class="cancel-download">Cancel</button>;
                    //pauseDownload = <button class="pause-all">Pause Downloads from My Friend</button>;
                }
                else if (props.downloadState == "queued") {
                    downloadClass = "download-offline";
                    description = props.owner + " | Queued for Download";
                    cancelDownload = <button class="cancel-download">Cancel</button>;
                    pauseDownload = <button class="pause-all">Pause Downloads from My Friend</button>;
                }
                else if (props.downloadState == "offline") {
                    downloadClass = "download-offline";
                    description = props.owner +  " | User currently offline";
                    cancelDownload = <button class="cancel-download">Cancel</button>;
                    pauseDownload = <button class="pause-all">Pause Downloads from My Friend</button>;
                }
                else if (props.downloadState == "finished") {
                    downloadClass = "download-finished";
                    description = props.owner + " | 100% | Download Finished";
                    cancelDownload = <button class="cancel-download">Cancel</button>;
                    pauseDownload = <button class="pause-all">Pause Downloads from My Friend</button>;
                }

                this.filePath = props.path;
                this.owner = props.owner;

                return <div><div class={"download " + downloadClass}>
                    <div class="download-inner">
                        <div selectable>
                            {description}
                            <br /><br />
                            {props.path}
                        </div>
                        <br />
                        {openDownload}
                        {cancelDownload}
                        {pauseDownload}
                    </div>
                </div>
                    <hr />
                </div>;
            }

            ["on click at button.cancel-download"]() {
                console.error(this.filePath);
                console.error(this.owner);
                Window.this.xcall('downloads_cancel_single', this.owner, this.filePath);
            }
        }

        class PausedDownloadsBar extends Element {
            
            this(props) {

            }

            render(props) {
                if (props.is_downloading_paused) {
                    return <div style="background-color: #fffa66; padding: 1em 0 1em 0; color: #000; margin: 0 0 1em 0;">
                    <div style="margin: 0 0 0 1em;"><strong>All Downloads are Paused</strong></div>
                </div>
                } else {
                    return <div style="display:none;"></div>
                }

            }
        }

        class MyDownloads extends Element {

            this(props) {

            }

            updateDownloads(evt) {
                console.error("REFRESH DLS");
                all_downloads = Window.this.xcall('get_all_downloads');
                console.log(all_downloads);
                this.componentUpdate();
            }

            componentDidMount() {
                this.onGlobalEvent("render-downloads", this.updateDownloads);

                this.timer(2000, () => {
                    this.updateDownloads(null);
                    return true; // to keep the timer ticking
                });
            }

            render(props) {
                return <div>
                    <PausedDownloadsBar is_downloading_paused={all_downloads.is_downloading_paused} />
                    {all_downloads.in_progress.map((d) => <SingleDownload owner={d.owner} percent={d.percent} path={d.path} downloadState="inProgress" />)}
                    {all_downloads.invalid.map((d) => <SingleDownload owner={d.owner} percent={d.percent} path={d.path} downloadState="invalid" />)}
                    {all_downloads.queued.map((d) => <SingleDownload owner={d.owner} percent={d.percent} path={d.path} downloadState="queued" />)}
                    {all_downloads.offline.map((d) => <SingleDownload owner={d.owner} percent={d.percent} path={d.path} downloadState="offline" />)}
                    {all_downloads.finished.map((d) => <SingleDownload owner={d.owner} percent={d.percent} path={d.path} downloadState="finished" />)}
                </div>;
            }
        }

        class SingleDownloadFromMe extends Element {

            this(props) {

            }

            render(props) {
                return <div><div class="download">
                    <div class="download-inner" selectable>
                        {props.name} | {props.percent}% | Downloading now...
                        <br /><br />
                        {props.path}
                    </div>
                </div>
                    <hr />
                </div>
            }
        }

        class DownloadsFromMe extends Element {

            this(props) {

            }

            updateDownloads(evt) {
                console.error("REFRESH");
                all_uploads = Window.this.xcall('get_all_uploads');
                console.log(all_uploads);
                this.componentUpdate();
            }

            componentDidMount() {
                this.onGlobalEvent("render-downloads", this.updateDownloads);

                this.timer(2000, () => {
                    this.updateDownloads(null);
                    return true; // to keep the timer ticking
                });
            }

            render(props) {
                return <div>
                    {all_uploads.map((d) => <SingleDownloadFromMe name={d.nickname} percent={d.percent} path={d.path} />)}
                </div>
            }

        }

        let myDownloadsElement = <MyDownloads />;
        let downloadsFromMeElement = <DownloadsFromMe />;
        document.$("div#my-downloads").content(myDownloadsElement);
        document.$("div#downloading-from-me").content(downloadsFromMeElement);

        class MenuBar extends Element {

            this(props) {

            }

            render() {
                return <div class="menu-bar">
                    <button id="open-downloads">Open Downloads</button> |
                    <button id="clear-finished">Clear Finished</button> |
                    <button id="clear-invalid">Clear Invalid</button> |
                    <button id="cancel-all-downloads">Cancel All</button> |
                    <button id="pause-all-downloads">Pause All</button> |
                    <button id="resume-all-downloads">Resume All</button>
                </div>;
            }

            ["on click at button#open-downloads"]() {
                let response = Window.this.xcall('downloads_open');
            }

            ["on click at button#clear-finished"]() {
                Window.this.xcall('downloads_clear_finished');
                Window.post( new Event("render-downloads") );
            }

            ["on click at button#clear-invalid"]() {
                Window.this.xcall('downloads_clear_invalid');
                setMsgBoxSuccess("All Invalid Downloads will be cleared");
                Window.post( new Event("render-downloads") );
            }

            ["on click at button#cancel-all-downloads"]() {
                let response = Window.this.xcall('downloads_cancel_all');
                setMsgBoxSuccess("All Downloads are being cancelled");
            }

            ["on click at button#pause-all-downloads"]() {
                let response = Window.this.xcall('downloads_pause_all');
                setMsgBoxSuccess("All Downloads are being paused");
                Window.post( new Event("render-downloads") );
            }

            ["on click at button#resume-all-downloads"]() {
                let response = Window.this.xcall('downloads_resume_all');
                setMsgBoxSuccess("All Downloads are being resumed");
                Window.post( new Event("render-downloads") );
            }

        }

        class MenuBarFromMe extends Element {

            this(props) {

            }

            render() {
                return <div class="menu-bar">
                    <button id="clear-finished-from-me">Clear Finished</button>
                </div>;
            }

            ["on click at button#clear-finished-from-me"]() {
                //let response = Window.this.xcall('downloads_clear_finished_from_me');
            }

        }

        document.$(".menu-bar-holder").content(<MenuBar />);
        document.$(".my-downloads-menu-bar-holder").content(<MenuBarFromMe />);

    </script>
</head>

<body>

    <div class="main-body">
        <div id="msg-box"></div>

        <h1>Downloads</h1>
        <section style="border-spacing:50dip;">
            <div class="my-downloads">
                <h2>My Downloads</h2>
                <div class="menu-bar-holder"></div>
                <hr>
                <div id="my-downloads"></div>
            </div>

            <div class="from-me">
                <h2>Users Downloading From Me</h2>
                <div class="my-downloads-menu-bar-holder"></div>
                <hr>
                <div id="downloading-from-me"></div>
            </div>

        </section>
    </div>
</body>

</html>